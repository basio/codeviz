
# -------------------------------------------------------------------------------------------------
# IMPORTS
# -------------------------------------------------------------------------------------------------


# =================================================================================================
# BITBOARD CONSTANTS
# =================================================================================================

# -------------------------------------------------------------------------------------------------
# BITBOARD
# -------------------------------------------------------------------------------------------------

BB 	=  ['0','0','0','0','0','0','0','0',
		'0','0','0','0','0','0','0','0',
		'0','0','0','0','0','0','0','0',
		'0','0','0','0','0','0','0','0',
		'0','0','0','0','0','0','0','0',
		'0','0','0','0','0','0','0','0',
		'0','0','0','0','0','0','0','0',
		'0','0','0','0','0','0','0','0']

# -------------------------------------------------------------------------------------------------
# Knight Moves
# -------------------------------------------------------------------------------------------------

KMS = [ -17, -15, -10, -6, +6, +10, +15, +17 ]

# =================================================================================================
# HELPER FUNCTIONS
# =================================================================================================

# -------------------------------------------------------------------------------------------------
# bitboard string
# -------------------------------------------------------------------------------------------------

def bbToStr(bb):
	return "".join(bb)

# -------------------------------------------------------------------------------------------------
# long binary to string
# -------------------------------------------------------------------------------------------------

def binToStr(l):
	return '{0:064b}'.format(l)

# -------------------------------------------------------------------------------------------------
# bitboard to long
# -------------------------------------------------------------------------------------------------

def strToBin(bbStr):
	return long(bbStr, 2)

# =================================================================================================
# BITBOARD FUNCTIONS
# =================================================================================================

# -------------------------------------------------------------------------------------------------
# bitboard
# -------------------------------------------------------------------------------------------------

def bb(pos):
	B = BB[:]

	if not isinstance(pos,list):
		pos = [pos]

	for p in pos:
		B[p] = '1'

	return B

# -------------------------------------------------------------------------------------------------
# bitboard as string
# -------------------------------------------------------------------------------------------------

def bbAsStr(pos):
	return bbToStr( bb(pos) )

# -------------------------------------------------------------------------------------------------
# bitboard moves
#	bs = bitString | bitArray
#	mv = move array
# -------------------------------------------------------------------------------------------------

def bbm(bs, mv):

	i = bs.index('1')
	m = mv[:]

	def add(v):
		return v + i

	m = map(add,m)

	return bb(m)

# -------------------------------------------------------------------------------------------------
# bitboard moves as string
# -------------------------------------------------------------------------------------------------

def bbmAsStr(bb, moves):
	return bbToStr( bbm(bb, moves) )

# =================================================================================================
# EXAMPLE: KNIGHT-MOVES
# =================================================================================================

# k 	= strToBin('0000000000000000000000000000000000010000000000000000000000000000')
# km 	= strToBin('0000000000000000001010000100010000000000010001000010100000000000')
# wp  = strToBin('0000000000000000000000000000000000010000000001000010000000000000')
# kkm = k | km
# kms = kkm ^ wp

# print binToStr(kms)

# -------------------------------------------------------------------------------------------------
# TEST
# -------------------------------------------------------------------------------------------------

k 	= bbAsStr(35)
km 	= bbmAsStr(k,KMS)
wp 	= bbAsStr([35,45,52])

print k
print km

k 	= strToBin(k)
km 	= strToBin(km)
kkm = k | km

print binToStr(kkm)

wp  = strToBin(wp)
print binToStr(wp)

kms = kkm ^ wp

print binToStr(kms)

# 0000000000000000000000000000000000010000000000000000000000000000
# 0000000000000000001010000100010000010000010001000010100000000000
# 0000000000000000000000000000000000010000000001000010000000000000
# 0000000000000000001010000100010000000000010000000000100000000000

# -------------------------------------------------------------------------------------------------
# END
# -------------------------------------------------------------------------------------------------
